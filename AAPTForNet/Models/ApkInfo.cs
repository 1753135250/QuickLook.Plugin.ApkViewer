using System.Collections.Generic;
using System.IO;

namespace AAPTForNet {
    public class ApkInfo {

        private static readonly string unknownInfo = "<Empty>";
        // Default icon name generated by Android Studio
        private static readonly string defaultIconName = "ic_launcher.png";

        private string _iconName = defaultIconName;

        public static readonly string SmallScreen = "small";
        public static readonly string NormalScreen = "normal";
        public static readonly string LargeScreen = "large";
        public static readonly string xLargeScreen = "xlarge";

        public static readonly ApkInfo Empty = new ApkInfo();

        public string AppName { get; set; }
        public string PackageName { get; set; }
        public string Version { get; set; }
        public string FullPath { get; set; }
        public SDKInfo MinSDK { get; set; }
        public SDKInfo TargetSDK { get; set; }
        public List<string> Permissions { get; set; }
        public List<string> SupportScreens { get; set; }
        
        public string IconName {
            // IconName include name and extension
            get => _iconName.Length > 3 ? _iconName : defaultIconName;
            set {
                if (value == string.Empty || value.ToLower().EndsWith(".xml"))
                    // Exclude markup icon only. Many packages do not use .png icon
                    _iconName = defaultIconName;
                else
                    _iconName = Path.GetFileName(value);
            }
        }
        public string IconPath {
            get {
                if (IconName == defaultIconName) return string.Empty;

                return AAPTool.TempPath + @"\" + IconName;
            }
        }
        public long PackageSize {
            get {
                if (!File.Exists(FullPath))
                    return 0;

                return new FileInfo(FullPath).Length;
            }
        }
        public bool IsEmpty {
            get {
                return (AppName == string.Empty || AppName == unknownInfo) &&
                    (PackageName == string.Empty || PackageName == unknownInfo);
            }
        }

        internal ApkInfo() {
            AppName = unknownInfo;
            PackageName = unknownInfo;
            Version = unknownInfo;
            FullPath = string.Empty;
            MinSDK = SDKInfo.Unknown;
            TargetSDK = SDKInfo.Unknown;
            Permissions = new List<string>();
            SupportScreens = new List<string>();
        }
    }
}
